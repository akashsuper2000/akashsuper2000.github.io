{"componentChunkName":"component---src-templates-post-js","path":"/blog/gsoc-2020-proposal","result":{"data":{"markdownRemark":{"html":"<h1>Project description</h1>\n<p>Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page.</p>\n<p>This project is about building an inspector intercepting and visualizing server-sent event traffic to help the developer to easily see what exact data are received from the server and when. This inspector should be a part of the existing Network panel in Firefox DevTools. This project should ideally build upon the existing WebSocket inspection tab by adding support for server-sent events inspection.</p>\n<h1>Goals</h1>\n<ul>\n<li>\n<h4><span style=\"font-weight: normal\"> View the size of the packets and the time when it was received.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> View the payload of each event.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> Support for sort and filter with respect to parameters like time and size.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> View the event headers, source and content in an organized manner as well as in JSON format.</h4>\n</li>\n</ul>\n<h1>Implementation plan</h1>\n<h2>Client side development plan:</h2>\n<ul>\n<li>\n<h4><span style=\"font-weight: normal\"> To create an interface that supports and visualizes the JSON packets that are being obtained onto the client machine. This will be added upon as an additional tab in the networks panel in the DevTools section.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> A change in the Toolbar section of the codebase to include the UI change to navigate to the tab, and a modification to the base function will be added to incorporate the same.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> An additional CSS file that contains the styles of the above mentioned tab will be appended to src/assets directory.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> A React function that governs the UI and the general framework of the panel is to be developed. Redux reducers will be used to respond to the changes by making the necessary changes to the panel.</h4>\n</li>\n</ul>\n<h2>Server side development plan:</h2>\n<ul>\n<li>\n<h4><span style=\"font-weight: normal\"> An actor is to be created that will reside on the server (browser). The code will be a part of the  devtools/server/actors/network-monitor directory on Mozilla devtools.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> This actor will be responsible for monitoring the events received and relying the information to the client via JSON objects.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> The actor will ensure the proper formatting of the objects before it is sent to the client. This includes the checks for headers, content, timestamps among others.</h4>\n</li>\n</ul>\n<h1>Architecture plan:</h1>\n<ul>\n<li>\n<h4><span style=\"font-weight: normal\"> The Remote Debugging protocol (RDP) is a Mozilla debugging protocol that allows a debugger to connect to a browser, discover what sorts of things are present to debug or inspect, select JavaScript threads to watch, and observe and modify their execution. This protocol is to be used to communicate between the client and the server.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> All communication between debugger (client) and browser (server) is in the form of JSON objects. This makes it easier to implement, debug and test the components being developed.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> Client is responsible for rendering data it receives from the server and the server is responsible for collecting data and sending it over to the client with necessary information.</h4>\n</li>\n</ul>\n<h1>Sequence diagram:</h1>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 700px;\"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/4a4c49a66ee3500c94758d05a64770f5/77308/sequence.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 62.28571428571429%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'250\\'%20viewBox=\\'0%200%20400%20250\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M3%203L2%20125v121h395V2H200L3%203m2%203l5%201h10l11-1h1l5%201c4%200%204%200%204%202s0%202-1%201l-1-1c0%202-19%203-19%200h-1c0%202-8%202-8%200-1-1-1-1-1%201v2l-1-2-1-1-2%202-2%202c0%202%201%202%2040%202h41l3-3%203-6V4H47C9%204%204%204%205%206m87%201l-3%206-4%203H4v229h392V4H92v3M36%2034v12h83V23l-42-1H36v12m127%200v12h82V22h-82v12m109%200v12h83V22h-83v12M37%2033v11h80V23H37v10m128-9l-1%2010v10h80V23h-39l-40%201m109%200l-1%2010v10h81V24l-40-1-40%201m-70%203c-2%200-1%205%201%206l2-1h2l1-2%202%201%202%201h6l1-1h1c1%202%201%202%202%201h3c0%201%201%201%202-1h1c0%202%202%201%202-1%201-1%200-2-3-2l-3%201h-18c0-2-2-3-4-2m106%200l-1%203c0%203%202%204%204%202h13l2%201c0%202%203%201%203-1h1c0%202%202%203%203%201h2l2-1%202-1%201-1v-2l-1%201h-10c0-2-6-1-6%201h-1l-1-2-3-1-2%201c0%201-3%201-6-1h-2M194%2076l-58%201a1338%201338%200%200064%202v8l1%207%203%201%203-1a822%20822%200%2001101-2l1%2023v22h3l2%201v1l1-1%202-1%201-7c0-6%200-7%202-7s2-1%202-7c0-8%200-9%203-7h3c0-1%201-2%204-2%202%200%203%200%203-2s1-2%203-2c1%200%202%200%201-1l1-1c2%201%203-1%203-2h-3l-3-1h-1l-1-1c0-2-1-2-8-2-9%200-9%200-9-2%200-3%200-3-5-3l-6-1h-3l-48%201h-48v-6l-1-7-11-1h-2m117%2019l1%202%201%203c0%202%200%202-1%201l-1%2017v18h3c2%200%203-1%203-6%200-6%200-6-2-7-3%200-3-16%200-17%201%200%202-1%202-7v-7h-3c-3%200-3%200-3%203m7%206c0%206%201%206%207%204h3c0%202%206%201%206-1l-1-2-2-1c0-1-1-1-1%201h-1l-2-1c-1%201-2%200-2-1h1l1-1c-1-1%200-1%203-1%203%201%204%201%204-1l-8-1h-8v5m-124%2049l-59%201a1571%201571%200%200062%203l3-1v7c0%207%200%208%202%208l2%201h1l2-1%201-5v-6h48a333%20333%200%200151%201l2-1v26l1%2026%202%201c5%201%206%200%206-10%200-8%200-9%202-9s2-1%202-7c0-8%200-9%203-7h2l4-1c3%200%204-1%204-3s1-2%203-2%202%200%201-1v-1l2%201c1%201%201%201%201-1%200-1-1-2-3-2-2%201-3%200-3-2-1-2-1-2-9-2h-9v-4c0-2-1-3-2-3l-1-1h-1c-2%201-2%201-6-1h-4l-48%201c-46%200-48%200-48-2%200-1-1-2-5-2l-7-1h-2m117%2012l1%206v2l-1%2020v18h6v-8c0-7%200-8-2-9-2%200-2-1-2-8s0-8%202-9c2%200%203-3%201-3v-4l1-5c0-5%200-5-3-5s-3%200-3%205\\'%20fill=\\'%2364ffda\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"Sequence Diagram\"\n        title=\"Sequence Diagram\"\n        src=\"/static/4a4c49a66ee3500c94758d05a64770f5/39600/sequence.png\"\n        srcset=\"/static/4a4c49a66ee3500c94758d05a64770f5/1aaec/sequence.png 175w,\n/static/4a4c49a66ee3500c94758d05a64770f5/98287/sequence.png 350w,\n/static/4a4c49a66ee3500c94758d05a64770f5/39600/sequence.png 700w,\n/static/4a4c49a66ee3500c94758d05a64770f5/77308/sequence.png 881w\"\n        sizes=\"(max-width: 700px) 100vw, 700px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<h1>Testing strategies</h1>\n<ul>\n<li>\n<h4><span style=\"font-weight: normal\"> Static code analysis using SonarQube/SonarCloud.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> Unit testing for the individual functions written in Javascript.</h4>\n</li>\n<li>\n<h4><span style=\"font-weight: normal\"> Integration testing to ensure the rest of the components are working as expected.</h4>\n</li>\n</ul>\n<h1>Timeline</h1>\n<h4><code class=\"language-text\">May 4 - May 15</code></h4>\n<p>Familiarize myself with the code, mentor and community, the version control system, the documentation, the development environment and test system used.</p>\n<h4><code class=\"language-text\">May 16 - June 1</code></h4>\n<p>Modularize the final goal and set a deadline for each of the module completion after discussing with the mentor. Also, get the environment ready and potentially develop, test and commit a small portion to the development environment.</p>\n<h4><code class=\"language-text\">June 2 - June 15</code></h4>\n<p>Build the UI for the client side debugger to support the JSON objects received from the server. This will also include the support to sort and filter the objects received using parameters like size, timestamp and payload.</p>\n<h4><code class=\"language-text\">June 16 - August 5</code></h4>\n<p>Develop the server side actor that will essentially monitor the requests and relays the information to the debugger. Also write tests that control the quality of the code being developed.</p>\n<h4><code class=\"language-text\">August 6 - August 15</code></h4>\n<p>Polish the existing UI and improve upon it to render a neat view visualizing the details of individual events. This period is also to be used for extensive testing to make sure the components are working as expected and does not modify the behavior of other components.</p>\n<h4><code class=\"language-text\">August 16 - August 24</code></h4>\n<p>Document the written code and release the component into production after final mentor review and testing.</p>","frontmatter":{"title":"GSoC-2020 Proposal","description":"Proposal for Server Side Events Project","date":"2020-4-1","slug":"/blog/gsoc-2020-proposal","tags":["react","redux","node.js"]}}},"pageContext":{}}}