{"componentChunkName":"component---src-templates-post-js","path":"/blog/bluetooth-case","result":{"data":{"markdownRemark":{"html":"<h1>What is Bluetooth?</h1>\n<p>A Bluetooth technology is a high speed low powered wireless technology link that is designed to connect phones or other portable equipment together. It is a specification <code class=\"language-text\">(IEEE 802.15.1)</code> for the use of low power radio communications to link phones, computers and other network devices over short distances without wires. Wireless signals transmitted with Bluetooth cover short distances, typically up to <code class=\"language-text\">30 feet</code> (<code class=\"language-text\">10 meters</code>).</p>\n<p>It is achieved by embedded low cost transceivers into the devices. It supports on the frequency band of <code class=\"language-text\">2.45GHz</code> and can support upto <code class=\"language-text\">721KBps</code> along with three voice channels. This frequency band has been set aside by international agreement for the use of industrial, scientific and medical devices <code class=\"language-text\">(ISM).rd-compatible</code> with <code class=\"language-text\">1.0</code> devices.</p>\n<p>Bluetooth can connect up to eight devices simultaneously and each device offers a unique <code class=\"language-text\">48-bit</code> address from the <code class=\"language-text\">IEEE 802</code> standard with the connections being made point to point or multipoint.</p>\n<h1>Working of Bluetooth</h1>\n<p>Bluetooth Network consists of a Personal Area Network or a piconet which contains a minimum of <code class=\"language-text\">2</code> to maximum of <code class=\"language-text\">8</code> bluetooth peer devices - Usually a single master and upto <code class=\"language-text\">7</code> slaves.</p>\n<p>A master is the device which initiates communication with other devices. The master device governs the communications link and trafﬁc between itself and the slave devices associated with it.</p>\n<p>A slave device is the device that responds to the master device. Slave devices are required to synchronize their transmit/receive timing with that of the masters.\nIn addition, transmissions by slave devices are governed by the master device (i.e., the master device dictates when a slave device may transmit). Speciﬁcally, a slave may only begin its transmissions in a time slot immediately following the time slot in which it was addressed by the master, or in a time slot explicitly reserved for use by the slave device.</p>\n<p>The frequency hopping sequence is defined by the Bluetooth device address (<code class=\"language-text\">BD_ADDR</code>) of the master device.  The master device first sends a radio signal asking for response from the particular slave devices within the range of addresses. The slaves respond and synchronize their hop frequency as well as clock with that of the master device.</p>\n<p>Scatternets are created when a device becomes an active member of more than one piconet. Essentially, the adjoining device shares its time slots among the different piconets.</p>\n<h1>Bluetooth Addressing System</h1>\n<p>Every Bluetooth device has a unique 48-bit address, commonly abbreviated <code class=\"language-text\">BD_ADDR</code>. This will usually be presented in the form of a <code class=\"language-text\">12-digit</code> hexadecimal value. The most-significant half (<code class=\"language-text\">24 bits</code>) of the address is an organization unique identifier (OUI), which identifies the manufacturer. The lower <code class=\"language-text\">24-bits</code> are the more unique part of the address.</p>\n<h1>Bluetooth Protocol Stack</h1>\n<p>Bluetooth protocol stack defines and provides different types of layers and functionalities. Bluetooth can run the different applications over different protocol stacks, but each one of these protocol stacks uses the same Bluetooth link and physical layers. The below diagram shows a complete Bluetooth protocol stack. It shows the relationship between the protocols that use the services of other protocols when there is a payload to be transferred in the air.</p>\n<h1>Layers of Bluetooth Protocol Stack</h1>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 700px;\"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/ca442b39d7860130503187fbfe160d89/83a6d/protocol.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 71.42857142857143%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'286\\'%20viewBox=\\'0%200%20400%20286\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M25%2033v10h14l14%201v16H39l-13%201-1%209v10h27v54H26l-1%209v10h174v17H80v19h59l60%201v17H80v19h118v18h-81v20h166v-20h-83v-18h120v-19H201v-17l59-1h60v-19H200v-17h175v-9c0-12%201-11-15-11h-12l-1-26V80h28V60h-28v-8l1-8%2013-1h14V24H25v9m1%201v8h348V25H26v9m158-1v3h3c1%202%202%202%203%201h3l13-1c10%200%2012-1%2012-2-1-2-15-3-15%200l-2%201v-1c3-1%200-2-6-2s-7%201-7%202l-1-1c-2-2-2-2-3%200M54%2052v9l12-1c17%200%2016-1%2016%2010v10H54v54l72-1h73v-16h-63l-1-10V97h28V81l-14-1h-14V70l1-9%2013-1h14V44l-55-1H54v9m110%200v9l12-1c17%200%2016-1%2016%2011v9h-28v17h72V80h-27V60h27V43h-72v9m74-8l-1%208v8h28v20h-28v17h28v20h-65v16h73l73%201V80h-27V60h27V43h-54l-54%201m-28%2025v9h54V62l-27-1h-27v8m110%201v8h54V61h-54v9M26%2071v8h54V62H26v9m111%200v8h53V62h-53v9m0%2036v9h127V98H137v9M26%20144v8h347v-17H26v9m172-2l-1%202c0%202%206%203%2014%202h8c5%200%206%200%206-2l-4-1-4-1h-12c0-2-3%200-3%202l-1-1c-1-2-3-3-3-1M82%20180v8h237v-17H82v9m0%2037v8h237v-17H82v9m127-2v3h17c0%202%2013%201%2013-1%201-2%200-2-3-2h-3l-1-1-2%201-1%201-6-1a5067%205067%200%2001-14%200m-9%2031h-82v8l1%209h163v-18l-82%201\\'%20fill=\\'%2364ffda\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"Protocol Stack\"\n        title=\"Protocol Stack\"\n        src=\"/static/ca442b39d7860130503187fbfe160d89/39600/protocol.png\"\n        srcset=\"/static/ca442b39d7860130503187fbfe160d89/1aaec/protocol.png 175w,\n/static/ca442b39d7860130503187fbfe160d89/98287/protocol.png 350w,\n/static/ca442b39d7860130503187fbfe160d89/39600/protocol.png 700w,\n/static/ca442b39d7860130503187fbfe160d89/83a6d/protocol.png 861w\"\n        sizes=\"(max-width: 700px) 100vw, 700px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<h3>Radio (RF) layer</h3>\n<p>It performs modulation/demodulation of the data into RF signals. It defines the physical characteristics of a Bluetooth transceiver. It defines two types of physical link: connection-less and connection-oriented. </p>\n<h3>Baseband Link layer</h3>\n<p>It performs the connection establishment within a piconet.</p>\n<h3>Link Manager protocol layer</h3>\n<p>It performs the management of the already established links. It also includes authentication and encryption processes.</p>\n<h3>Logical Link Control and Adaptation protocol layer</h3>\n<p>It is also known as the heart of the Bluetooth protocol stack. It allows the communication between upper and lower layers of the Bluetooth protocol stack. It packages the data packets received from upper layers into the form expected by lower layers. It also performs the segmentation and multiplexing.</p>\n<h3>SDP layer</h3>\n<p>It is short for Service Discovery Protocol. It allows discovering the services available on another Bluetooth enabled device.</p>\n<h3>RF comm layer</h3>\n<p>It is short for Radio Frontend Component. It provides a serial interface with WAP and OBEX.</p>\n<h3>OBEX</h3>\n<p>It is short for Object Exchange. It is a communication protocol to exchange objects between two devices.</p>\n<h3>WAP</h3>\n<p>It is short for Wireless Access Protocol. It is used for internet access.</p>\n<h3>TCS</h3>\n<p>It is short for Telephony Control Protocol. It provides telephony service.</p>\n<h3>Application layer</h3>\n<p>It enables the user to interact with the application.</p>\n<h1>Types of Protocol</h1>\n<h2>RFCOMM</h2>\n<p>The RFCOMM protocol provides roughly the same service and reliability guarantees as TCP. Although the specification explicitly states that it was designed to emulate <code class=\"language-text\">RS-232</code> serial ports (to make it easier for manufacturers to add Bluetooth capabilities to their existing serial port devices), it is quite simple to use it in many of the same scenarios as TCP.</p>\n<h3>Implementation</h3>\n<div class=\"gatsby-code-title\">server.py</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bluetooth <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n \nport <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n \nserver_sock <span class=\"token operator\">=</span> BluetoothSocket<span class=\"token punctuation\">(</span> RFCOMM <span class=\"token punctuation\">)</span>\nserver_sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nserver_sock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n \nclient_sock<span class=\"token punctuation\">,</span> client_info <span class=\"token operator\">=</span> server_sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accepted connection from \"</span><span class=\"token punctuation\">,</span> client_info<span class=\"token punctuation\">)</span>\n \ndata <span class=\"token operator\">=</span> client_sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received [%s]\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\n \nclient_sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nserver_sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">client.py</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bluetooth <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nserver_address <span class=\"token operator\">=</span> <span class=\"token string\">\"01:23:45:67:89:AB\"</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n \nsock<span class=\"token operator\">=</span>BluetoothSocket<span class=\"token punctuation\">(</span> RFCOMM <span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>server_address<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \nsock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n \nsock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>L2CAP</h2>\n<p>UDP is often used in situations where reliable delivery of every packet is not crucial, and sometimes to avoid the additional overhead incurred by TCP. Specifically, UDP is chosen for its best-effort, simple datagram semantics. These are the same criteria that L2CAP satisfies as a communications protocol.</p>\n<h3>Implementation</h3>\n<div class=\"gatsby-code-title\">server.py</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bluetooth <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n \nport <span class=\"token operator\">=</span> <span class=\"token number\">0x1001</span>\n \nserver_sock <span class=\"token operator\">=</span> BluetoothSocket<span class=\"token punctuation\">(</span> L2CAP <span class=\"token punctuation\">)</span>\nserver_sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nserver_sock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n \nclient_sock<span class=\"token punctuation\">,</span>address <span class=\"token operator\">=</span> server_sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accepted connection from \"</span><span class=\"token punctuation\">,</span>address<span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> client_sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received [%s]\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\n \nclient_sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nserver_sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<div class=\"gatsby-code-title\">client.py</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bluetooth <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n \nsock <span class=\"token operator\">=</span> BluetoothSocket<span class=\"token punctuation\">(</span>L2CAP<span class=\"token punctuation\">)</span>\n \nbd_addr <span class=\"token operator\">=</span> <span class=\"token string\">\"01:23:45:67:89:AB\"</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">0x1001</span>\n \nsock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bd_addr<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \nsock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n \nsock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Bluetooth Case Study","description":"A case study on Bluetooth","date":"2020-2-1","slug":"/blog/bluetooth-case","tags":["bluetooth","python"]}}},"pageContext":{}}}